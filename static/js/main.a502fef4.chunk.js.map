{"version":3,"sources":["ToDo.js","App.js","serviceWorker.js","index.js"],"names":["ToDo","_ref","item","onClick","onDelete","react_default","a","createElement","title","type","id","defaultChecked","completed","htmlFor","className","ToDoCount","number","ClearButton","_ref2","removeCompleted","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggleComplete","newTodos","state","todos","map","todo","setState","hasCompleted","removeTodo","filter","addToDo","event","preventDefault","toDoInput","current","value","lastId","concat","toConsumableArray","complete","length","toggleCompleteButton","deleteAll","name","React","createRef","_this2","onSubmit","autoFocus","ref","src_ToDo","key","App_ToDoCount","App_ClearButton","Component","defaultProps","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a502fef4.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nconst ToDo = ({ item, onClick, onDelete }) => (\n  <li>\n    {item.title}\n    <input\n      type=\"checkbox\"\n      id={item.id}\n      defaultChecked={item.completed}\n      onClick={() => onClick(item)}\n    />\n\n    <label htmlFor={item.id} />\n    <button>\n      <i onClick={() => onDelete(item)} className=\"fa fa-trash\" />\n    </button>\n  </li>\n);\n\nToDo.propTypes = {\n  item: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool\n  })\n};\n\nexport default ToDo;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport ToDo from \"./ToDo\";\nimport PropTypes from \"prop-types\";\n\nconst ToDoCount = ({ number }) => (\n  <p>\n    {number} {number <= 1 ? \"Todo\" : \"Todos\"}\n  </p>\n);\nconst ClearButton = ({ removeCompleted }) => (\n  <button onClick={() => removeCompleted()}>Clear Completed</button>\n);\n\nclass App extends Component {\n  constructor(props) {\n    super(props); // oop - bringing all the props from react component\n    this.state = {\n      name: \"Bobby Bob\",\n      todos: [],\n      lastId: 0,\n      toggleCompleteButton: false\n    };\n    this.toDoInput = React.createRef();\n  }\n\n  toggleComplete = item => {\n    const newTodos = this.state.todos.map(todo => {\n      if (item.id === todo.id) {\n        todo.completed = !todo.completed;\n      }\n      return todo;\n    });\n\n    this.setState({ todos: newTodos });\n    this.hasCompleted();\n  };\n\n  removeTodo = item => {\n    const newTodos = this.state.todos.filter(todo => item.id !== todo.id);\n    this.setState({ todos: newTodos });\n  };\n\n  addToDo = event => {\n    event.preventDefault();\n    let toDoInput = this.toDoInput.current;\n    if (toDoInput.value) {\n      const id = this.state.lastId + 1; // update id\n\n      const newTodos = [\n        ...this.state.todos,\n        { id, title: toDoInput.value, complete: false }\n      ];\n      this.setState({\n        todos: newTodos,\n        lastId: id\n      });\n      toDoInput.value = \"\";\n    }\n  };\n\n  hasCompleted = () => {\n    const completedTodo = this.state.todos.filter(item => {\n      return item.completed;\n    });\n    if (completedTodo.length) {\n      this.setState({ toggleCompleteButton: true });\n    } else {\n      this.setState({ toggleCompleteButton: false });\n    }\n  };\n\n  removeCompleted = () => {\n    const newTodos = this.state.todos.filter(todo => {\n      if (!todo.completed) {\n        return todo;\n      }\n    });\n\n    this.setState({ todos: newTodos });\n  };\n  deleteAll = () => {\n    this.setState({ todos: [] });\n  };\n  render() {\n    return (\n      <div className=\"todo-list\">\n        {/* {showHeader ? <h1>So Much TODO</h1> : <h1>Untitled Project</h1>}\n        <h1>List of TODOS:</h1>\n        <div className=\"todo-list\">\n          <ul>\n            {todos.map((item, key) => (\n              <li key={key}>{item}</li>\n            ))}\n          </ul>\n        </div> */}\n        <h1 onClick={this.toggleComplete}>List of TODOS:</h1>\n        <div className=\"add-todo\">\n          <form name=\"addTodo\" onSubmit={this.addToDo}>\n            <input autoFocus type=\"text\" ref={this.toDoInput} />\n            <span>(press enter to add)</span>\n          </form>\n        </div>\n        <ul>\n          {this.state.todos.map(item => (\n            <ToDo\n              onDelete={this.removeTodo}\n              onClick={this.toggleComplete}\n              key={item.id}\n              item={item}\n            />\n          ))}\n        </ul>\n        <div className=\"todo-admin\">\n          <ToDoCount number={this.state.todos.length} />\n          {this.state.toggleCompleteButton && (\n            <ClearButton removeCompleted={this.removeCompleted} />\n          )}\n\n          <button onClick={this.deleteAll}>delete all</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nToDoCount.propTypes = {\n  number: PropTypes.number\n};\n\nToDoCount.defaultProps = {\n  number: 0\n};\n\nClearButton.propTypes = {\n  removeCompleted: PropTypes.func.isRequired\n};\n\nClearButton.defaultProps = {\n  removeCompleted: () => {}\n};\n\nexport default App;\n\n// addToDo = event => {\n//   event.preventDefault();\n//   let toDoInput = this.toDoInput.current;\n//   if (toDoInput.value) {\n//     const id = this.state.lastId + 1; // update id\n//     const newTodos = [\n//       ...this.state.todos,\n//       { id, title: toDoInput.value, complete: false }\n//     ];\n//     this.setState({\n//       todos: newTodos,\n//       lastId: id\n//     });\n//     toDoInput.value = \"\";\n//   }\n// };\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}